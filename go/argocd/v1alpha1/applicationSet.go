// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ApplicationSet is a set of Application resources
type ApplicationSet struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// ApplicationSetSpec represents a class of application set state.
	Spec ApplicationSetSpecOutput `pulumi:"spec"`
	// ApplicationSetStatus defines the observed state of ApplicationSet
	Status pulumi.MapOutput `pulumi:"status"`
}

// NewApplicationSet registers a new resource with the given unique name, arguments, and options.
func NewApplicationSet(ctx *pulumi.Context,
	name string, args *ApplicationSetArgs, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	if args == nil {
		args = &ApplicationSetArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ApplicationSet")
	var resource ApplicationSet
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ApplicationSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSet gets an existing ApplicationSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSetState, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	var resource ApplicationSet
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ApplicationSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSet resources.
type applicationSetState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApplicationSetSpec represents a class of application set state.
	Spec *ApplicationSetSpec `pulumi:"spec"`
	// ApplicationSetStatus defines the observed state of ApplicationSet
	Status map[string]interface{} `pulumi:"status"`
}

type ApplicationSetState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ApplicationSetSpec represents a class of application set state.
	Spec ApplicationSetSpecPtrInput
	// ApplicationSetStatus defines the observed state of ApplicationSet
	Status pulumi.MapInput
}

func (ApplicationSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetState)(nil)).Elem()
}

type applicationSetArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApplicationSetSpec represents a class of application set state.
	Spec *ApplicationSetSpec `pulumi:"spec"`
	// ApplicationSetStatus defines the observed state of ApplicationSet
	Status map[string]interface{} `pulumi:"status"`
}

// The set of arguments for constructing a ApplicationSet resource.
type ApplicationSetArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ApplicationSetSpec represents a class of application set state.
	Spec ApplicationSetSpecPtrInput
	// ApplicationSetStatus defines the observed state of ApplicationSet
	Status pulumi.MapInput
}

func (ApplicationSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetArgs)(nil)).Elem()
}

type ApplicationSetInput interface {
	pulumi.Input

	ToApplicationSetOutput() ApplicationSetOutput
	ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput
}

func (*ApplicationSet) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSet)(nil))
}

func (i *ApplicationSet) ToApplicationSetOutput() ApplicationSetOutput {
	return i.ToApplicationSetOutputWithContext(context.Background())
}

func (i *ApplicationSet) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetOutput)
}

type ApplicationSetOutput struct {
	*pulumi.OutputState
}

func (ApplicationSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSet)(nil))
}

func (o ApplicationSetOutput) ToApplicationSetOutput() ApplicationSetOutput {
	return o
}

func (o ApplicationSetOutput) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationSetOutput{})
}
